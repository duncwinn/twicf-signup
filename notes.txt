Author: duncwinn
Date: 2014
Info: Duncan's general pointers during the development of this app.

//////////////////////////////////////////////////////////////////////////////////////////////
///    @SpringBootApplication
//////////////////////////////////////////////////////////////////////////////////////////////

The Application starts with  @SpringBootApplication  This annotation replaces:
//@ComponentScan
//@Configuration
//@EnableAutoConfiguration

//You didn't strictly need @Configuration as boot will do this for you but it's a good safeguard
//@ComponentScan searched and creates beans from this package and it's children


//////////////////////////////////////////////////////////////////////////////////////////////
///    Postgres
//////////////////////////////////////////////////////////////////////////////////////////////


        ///General Notes on PSQL////////////////////////////////////////////////////////////////////////////////////////////////
        //For testing SQL use SQUirrle -
        //copy libs form .m2: cp postgresql-9.1-901.jdbc4.jar /Applications/SQuirreLSQL.app/Contents/Resources/Java/lib/
        //create user: create user postgres;
        //create db: create database twicfdb;
        //logon:  psql -U postgres twicfdb
        //logon: psql twicfdb;
        //then grant privileges for user postgres: grant all on subscription to postgres;
        //exit: ctrl d


-- INSERT INTO subscription VALUES (DEFAULT,'dwinn@pivotal.io','foo', 'USER');
//////////////////////////////////////////////////////////////////////////////////////////////
///    ToDo
//////////////////////////////////////////////////////////////////////////////////////////////

3. Cloud Connectors
4. How do you ignore Spring Security locally?
5. Unsubscribe link - which emails you and unsubscribe link with a time sensitive URL?





//////////////////////////////////////////////////////////////////////////////////////////////
///    DONE
//////////////////////////////////////////////////////////////////////////////////////////////

1. Understand why H2 does not work: this was due to the SQL password inject - for some reason it did not work properly
We moved the security Username/password into env vars. This means they are not part of the app so secure but they
don't have the heavy overhead of using a DB. H@ is now working again.

2. Git was pointing to the old repo - changed .git/config to point to the correct repo, then git add . / git commit / git push

3. pom and other files not visible (files don't appear part of the project). packages view was selected - got back to project to see these files


//////////////////////////////////////////////////////////////////////////////////////////////
///    LOGGING
//////////////////////////////////////////////////////////////////////////////////////////////

#  The application.yml contained properties for mail but It's bad to have uname and passwd in a properties file
   so we moved these to env vars for dev and introspect vcap.services for CF
#   there's no JavaMailSender bean in your application context. Boot will create one for you, but only if the
#   spring.mail.host property is set. Setting it to localhost gets all of the tests bar one to pass
#   For the app this is set as part of the env vars

  mail:
#    username: 1kclQOItwV
#    host: smtp.sendgrid.net
#    host: localhost   --------> added this back in for tests to pass
#    password: Ulq1PwMnON
    port: 2525


//////////////////////////////////////////////////////////////////////////////////////////////
///    LOGGING
//////////////////////////////////////////////////////////////////////////////////////////////

Extract from logback.xml (nolonger required because log levels were set in the application.yml)

<configuration>

    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>
                %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
            </pattern>
        </encoder>
    </appender>

    <logger name="org.springframework.security" level="debug"/>

    <root level="info">
        <appender-ref ref="stdout"/>
    </root>

</configuration>


/////////////////////
log4j.xml config  ///
/////////////////////

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration debug="true"
                     xmlns:log4j='http://jakarta.apache.org/log4j/'>

    <appender name="console" class="org.apache.log4j.ConsoleAppender">
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern"
                   value="%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n" />
        </layout>
    </appender>

    <root>
        <level value="INFO" />
        <appender-ref ref="console" />
    </root>

    <!-- debug component level -->
    <logger name="org.springframework">
        <level value="DEBUG" />
        <appender-ref ref="console" />
    </logger>

</log4j:configuration>


//////////////////////////////////////////////////////////////////////////////////////////////
///    PROFILES + PROPERTIES vs ENV-VARS
//////////////////////////////////////////////////////////////////////////////////////////////

We are using env vars to set the profile but equally it could be set via JVM as per below
 -Dspring.profiles.active=in-memory

An env var named SPRING_MAIL_HOST is the same as a property named spring.mail.host in application.properties or
application.yaml (thanks to Boot's relaxed binding support:
http://docs.spring.io/spring-boot/docs/1.2.0.RELEASE/reference/htmlsingle/#boot-features-external-config-relaxed-binding),
with configuration in the application.* files taking precedence over the environment variables. All the different sources
and their order is documented here:
http://docs.spring.io/spring-boot/docs/1.2.0.RELEASE/reference/htmlsingle/#boot-features-external-config





//////////////////////////////////////////////////////////////////////////////////////////////
////// OPTIONALS LAMDAS COLLECTIONS AND THE STREAMING API
////// //Using alt enter to unpack the code in IntelliJ
//////////////////////////////////////////////////////////////////////////////////////////////


TO get a cloud bean there are a couple of ways to do it:

@ServiceScan and @CloudScan are options. + AbstractCloudConfig...
Getting a Cloud bean in the app context isn't the purpose of using AbstractCloudConfig, its just a side-effect of using
that manual configuration technique. AbstractCloudConfig gives you a way to manually create connection beans and customize
parameters like pooling, etc that you can't customize with @ServiceScan/@CloudScan. Everything else is just support code
to make one of those two approaches happen.

        //For readability I've removed this line which completes the expression
                .orElse(Arrays.asList("Local Environment", "No Cloud Present"));


        //This is the nice way of doing it....
        //We are streaming the collection (basically iterating over the collection inline).
        //We are taking the stream and mapping it to a function
        //The function gets the service Id and adds “collects” this into a Collection of type list.

        return this.cloud
                .map(cloud -> cloud.getServiceInfos().stream().map(ServiceInfo::getId).collect(Collectors.toList()))


        //Expanding the lamda body on "cloud -> " we can see we are "returning" the results of a function call

        return this.cloud
                .map(cloud -> {
                    return cloud.getServiceInfos().stream().map(ServiceInfo::getId).collect(Collectors.toList());
                })


        //Replacing the lamda with an anonymous class we can see we are mapping cloud to a function "apply"
        //that takes in the cloud (of type Cloud) and returns a list of Strings

        return this.cloud
                .map(new Function<Cloud, List<String>>() {
                    @Override
                    public List<String> apply(Cloud cloud) {
                        return cloud.getServiceInfos().stream().map(ServiceInfo::getId).collect(Collectors.toList());
                    }
                })
                .orElse(Arrays.asList("Local Environment", "No Cloud Present"));

        //With ServiceInfo::getId: replacing getId method reference with a lamda we are explicetly calling getId on ServiceInfo

        return this.cloud
                .map(new Function<Cloud, List<String>>() {
                    @Override
                    public List<String> apply(Cloud cloud) {
                        return cloud.getServiceInfos().stream().map((serviceInfo) -> serviceInfo.getId()).collect(Collectors.toList());
                    }
                })
//                .orElse(Arrays.asList("Local Environment", "No Cloud Present"));


        //this forces you to do an explicit get on cloud as cloud is an "optional" not a cloud
        //this is fine but feels wrong as you are forces to get an optional even though it is alwayse there
        //as you've checked for isPresent.

//        if(this.cloud.isPresent()) {
//            return this.cloud.get().getServiceInfos().stream().map(ServiceInfo::getId).toArray(String[]::new);
//        } else {
//            return new String[0];
//        }


        //This is the old clunky way of doing it.
//        if (cloud != null) {
//            final List<ServiceInfo> serviceInfos = cloud.getServiceInfos();
//
//            List<String> names = new ArrayList<String>();
//            for (ServiceInfo serviceInfo : serviceInfos) {
//                names.add(serviceInfo.getId());
//            }
//            return names.toArray(new String[names.size()]);
//        } else {
//            return new String[]{};
//        }


Need a readme.. that tells users to set the env var from cmd line so it's not hard coded in the manifest...
    SECURITY_USER_PASSWORD:

    cf set-env twicf-signup SECURITY_USER_PASSWORD <*********>; cf restage twicf-signup


    Subscribers

    hryan@pivotal.io, mrussell@pivotal.io, jtuchscherer@pivotal.io, jambay@yahoo.com, iandrews@pivotal.io, frodenas@pivotal.io, akearns@pivotal.io, dcicciarelli@pivotal.io,

